[tool.poetry]
name = "luna16"
version = "0.1.0"
description = ""
authors = ["Tomas Janicek <tomas.janicek@redampsecurity.com>"]

[tool.poetry.dependencies]
python = ">=3.11.6,<3.13"
# ML
scikit-learn = "^1.4.1.post1"
scipy = "^1.12.0"
torch = "^2.2.1"
torchvision = "^0.17.1"
torchaudio = "^2.2.1"
simpleitk = "^2.3.1"
# Visualizations
plotly = "^5.20.0"
matplotlib = "^3.8.3"
ipympl = "^0.9.3"
graphviz = "^0.20.3"
# ML Utils
numpy = "^1.26.4"
pandas = "^2.2.1"
jupyter = "^1.0.0"
pillow = "^10.2.0"
h5py = "^3.10.0"
tensorboard = "^2.16.2"
# Utils
pydantic = "^2.6.4"
diskcache = "^5.6.3"
typer = {extras = ["all"], version = "^0.9.0"}
# Dependencies for HuggingFace Transformers models
huggingface-hub = "^0.21.4"
regex = "^2023.12.25"
tokenizers = "^0.15.2"
safetensors = "^0.4.2"
sentencepiece = "^0.2.0"
importlib-metadata = "^7.1.0"
tqdm = "^4.66.2"
requests = "^2.31.0"
filelock = "^3.13.1"
sacremoses = "^0.1.1"
imageio = "^2.34.0"

[tool.poetry.group.dev.dependencies]
pylint = "^3.0"
jupyterlab = "^4.0"
ruff = "^0.2.2"
pytest = "^8.1.1"
diskcache-stubs = "^5.6.3.3.20240316"


[[tool.poetry.source]]
name = "pytorch-nightly"
url = "https://download.pytorch.org/whl/nightly/cpu"
priority = "explicit"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

########################################
# Linting and Formatting Configurations #
########################################

[tool.black]
line-length = 88
target-version = ['py37']
include = '\.pyi?$'
# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  ^/foo.py    # exclude a file named foo.py in the root of the project
  | .*_pb2.py  # exclude autogenerated Protocol Buffer files anywhere in the project
)
'''

[tool.ruff]
# Exclude a variety of commonly ignored directories.
extend-include = ["*.ipynb"]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Ruff rules 
# https://docs.astral.sh/ruff/rules/
select = [
  # Defaults
  "E", # pycodestyle
  "F", # Pyflakes
  # Custom rules
  "W",   # pycodestyle warnings
  "C",   # McCabe complexity
  "B",   # flake8-bugbear
  "I",   # isort
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  "RUF", # Ruff-specific rules
  # These rules can be helpful and should be activated at some point 
  # "ANN", # flake8-annotations
]
ignore = ["E501"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pyright]
exclude = [
  "**/__pycache__",
  ".venv",
]

reportMissingImports = true
reportMissingTypeStubs = false
reportInvalidStubStatement = true
reportIncompleteStub = true

strictListInference = true
strictDictionaryInference = true
strictSetInference = true

reportUnknownLambdaType = true
reportUnknownParameterType = true

reportMissingParameterType = true
reportMissingTypeArgument = "warning"

reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true

reportMatchNotExhaustive = true
reportPropertyTypeMismatch = true
reportMissingModuleSource = true
reportIncompatibleMethodOverride = true

reportDuplicateImport = true
reportShadowedImports = true
reportWildcardImportFromLibrary = true
reportPrivateImportUsage = false

reportIncompatibleVariableOverride = "warning"
reportInconsistentConstructor = "error"
reportFunctionMemberAccess = "warning"
reportConstantRedefinition = "warning"
reportOverlappingOverload = "warning"
reportPrivateUsage = "warning"
reportTypeCommentUsage = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"

reportUnusedClass = true
reportUnusedImport = true
reportUnusedFunction = true
reportUnusedVariable = true
reportUnusedExpression = true

reportImplicitStringConcatenation = "none"
reportUnusedCallResult = "none"

# Too strict for our framework
# reportUnknownMemberType = true
# reportUnknownArgumentType = "warning"
# reportUnknownVariableType = "warning"

# Does not work well with our frameworks
# reportImportCycles = true
# reportUninitializedInstanceVariable = "error"

# I do not see benefit for this
# reportCallInDefaultInitializer = "warning"
# reportMissingSuperCall = "warning"
